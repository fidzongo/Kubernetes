===> Sample test:
docker container run -d -p 8000:8000 --network cicd_network datascientest/fastapi:1.0.0
docker image build . -t authentication:latest
docker container run --rm --env-file bob.env --network cicd_network --name authentication authentication


===> Evaluation:
docker container run -d --network cicd_network datascientest/mysql-k8s:1.0.0
docker image build . -t api_test:latest
docker container run --rm -p 8000:8000 --env-file credentials.env --network cicd_network --name api_test api_test


docker image build . -t fidzongoformation/fast-api:1.0.0
docker image push fidzongoformation/fast-api:1.0.0
docker container run --rm -p 8000:8000 --env-file credentials.env --network cicd_network fidzongoformation/fast-api:1.0.0

kubectl create configmap my-eval-config-map --from-literal MYSQL_URL=localhost
kubectl create secret generic my-eval-secret --from-literal MYSQL_PASSWORD=datascientest1234

======================================================================================================================================================
===> Mise en place du conteneur de l'api:
- Nous utilisons les variables ci-dessous pour stocker les valeurs de URL et Password et pour le passer à l'api
MYSQL_URL
MYSQL_PASSWORD

===> Test unitaire de l'api:
- Pour tester unitaire l'api vous pouvez:

1/ Dans le dossier archive exécuter les commandes ci-dessous:
docker network create cicd_network
docker container run -d --network cicd_network datascientest/mysql-k8s:1.0.0
docker image build . -t api_test:latest
docker container run --rm -p 8000:8000 --env-file credentials.env --network cicd_network --name api_test api_test

ou 

2/ Utiliser l'image que nous avons uploadé dans notre compte dockerhub
docker image build . -t fidzongoformation/fast-api:1.0.0
docker image push fidzongoformation/fast-api:1.0.0
docker container run --rm -p 8000:8000 --env-file credentials.env --network cicd_network fidzongoformation/fast-api:1.0.0

===> Test Global dans kubernetes:
Pour ce faire vous pouvez exécuter les commandes ci-dessous dans l'ordre:
1/ kubectl create -f my-config-map-eval.yml
- Pour verifier la création exécuter cette commande
kubectl get configmap |grep my-config-map-eval

2/ kubectl create -f my-secret-eval.yml (le mot de passe dans le fichier yml est codé en base64)
- Pour verifier la création exécuter cette commande:
kubectl get secret |grep my-secret-eval

3/ kubectl create -f my-deployment-eval.yml
- Pour verifier la création exécuter cette commande:
kubectl get deployment |grep my-deployment-eval

4/ kubectl create -f my-service-eval.yml
- Pour verifier la création exécuter cette commande:
kubectl get service |grep my-service-eval

5/ kubectl create -f my-ingress-eval.yml
- Pour verifier la création exécuter cette commande:
get ingress |grep my-ingress-eva

Vous pouvez également effectuer ces étapes en mode graphique et verifier visuelement leur bonne exécution.

